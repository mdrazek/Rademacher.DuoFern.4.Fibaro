{"name":"Rademacher DuoFern","type":"com.fibaro.rollerShutter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_341"},"sections":{"items":[]}},"head":{"title":"quickApp_device_341"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"ip","type":"string","value":"homepilot"},{"name":"deviceId","type":"string","value":"1"},{"name":"pollingTime","type":"string","value":"5"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- Rademacher.DuoFern.4.Fibaro\n-- Author: @mdrazek\n-- Version: 1.0.0 (230125)\n-- License: MIT License\n-- https://github.com/mdrazek/Rademacher.DuoFern.4.Fibaro\n\n-- Roller shutter type should handle actions: open, close, stop\n-- To update roller shutter state, update property \"value\" with integer 0-100\n\nfunction QuickApp:sendRequest(method, data)\n    local address = \"http://\" .. self.ip .. \"/devices/\" .. self.deviceId\n    local http = net.HTTPClient({timeout=3000})\n    http:request(address, {\n        options = {\n            headers = {\n                [\"Content-Type\"] = \"application/json\"\n            },\n            data = data,\n            checkCertificate = false,\n            method = method\n        },\n        success = function(response)\n            if response and response.status and response.data then\n                --self:debug(\"RolloTron response status:\", response.status) \n                local data = json.decode(response.data)\n                if data.payload and data.payload.device and data.payload.device.capabilities then\n                    for i = 1, #data.payload.device.capabilities do\n                        if data.payload.device.capabilities[i].name == \"CURR_POS_CFG\" then\n                            local value = 100 - tonumber(data.payload.device.capabilities[i].value)\n                            self:updateProperty(\"value\", value)\n                        end\n                    end\n                end\n            end\n        end,\n        error = function(error)\n            --self:debug('error: ', json.encode(error))\n        end\n    }) \nend\n\n\nfunction QuickApp:open()\n    local data = string.format('{ \"name\": \"%s\" }', \"POS_UP_CMD\")\n    self:sendRequest('PUT', data)\n    self:updateProperty(\"value\", 100)\nend\n\nfunction QuickApp:close()\n    local data = string.format('{ \"name\": \"%s\" }', \"POS_DOWN_CMD\")\n    self:sendRequest('PUT', data)\n    self:updateProperty(\"value\",  0)    \nend\n\nfunction QuickApp:stop()\n    local data = string.format('{ \"name\": \"%s\" }', \"STOP_CMD\")\n    self:sendRequest('PUT', data)\nend\n\nfunction QuickApp:refresh()\n    self:sendRequest('GET', '')\nend\n\nfunction QuickApp:setValue(value)\n    local position = 100 - value\n    local data = string.format('{ \"name\": \"%s\", \"value\": \"%s\" }', \"GOTO_POS_CMD\", position)\n    self:sendRequest('PUT', data)\n    self:updateProperty(\"value\", value)\nend\n\nfunction QuickApp:onInit()\n    self.ip = self:getVariable(\"ip\")\n    self.deviceId = self:getVariable(\"deviceId\")\n    self.pollingTime = tonumber(self:getVariable(\"pollingTime\"))\n    if self.pollingTime > 0 then\n        setInterval(function()\n            self:refresh()\n        end, self.pollingTime * 1000)\n    end\nend"}]}